/**
 * Arquivo JavaScript principal do tema Thabatta Advocacia
 */
(function($) {
    'use strict';
    
    // Variáveis globais
    let currentStep = 1;
    const totalSteps = 4;
    
    // Inicialização quando o DOM estiver pronto
    $(document).ready(function() {
        // Menu mobile
        initMobileMenu();
        
        // Sliders
        initSliders();
        
        // Formulário multi-step
        initMultiStepForm();
        
        // Smooth scroll para links âncora
        initSmoothScroll();
        
        // Animações ao scroll
        initScrollAnimations();
    });
    
    /**
     * Inicializa o menu mobile
     */
    function initMobileMenu() {
        const menuToggle = $('.menu-toggle');
        const mainNav = $('.main-navigation');
        
        menuToggle.on('click', function() {
            $(this).toggleClass('toggled');
            mainNav.toggleClass('toggled');
            $('body').toggleClass('menu-open');
        });
        
        // Fechar menu ao clicar em link (mobile)
        $('.main-navigation a').on('click', function() {
            if (mainNav.hasClass('toggled')) {
                menuToggle.removeClass('toggled');
                mainNav.removeClass('toggled');
                $('body').removeClass('menu-open');
            }
        });
        
        // Fechar menu ao redimensionar para desktop
        $(window).on('resize', function() {
            if ($(window).width() > 768 && mainNav.hasClass('toggled')) {
                menuToggle.removeClass('toggled');
                mainNav.removeClass('toggled');
                $('body').removeClass('menu-open');
            }
        });
    }
    
    /**
     * Inicializa os sliders do tema
     */
    function initSliders() {
        // Slider de depoimentos
        if ($('.testimonial-carousel').length) {
            $('.testimonial-carousel').slick({
                dots: true,
                arrows: false,
                infinite: true,
                speed: 500,
                slidesToShow: 1,
                slidesToScroll: 1,
                autoplay: true,
                autoplaySpeed: 5000,
                adaptiveHeight: true,
                responsive: [
                    {
                        breakpoint: 992,
                        settings: {
                            slidesToShow: 1
                        }
                    }
                ]
            });
        }
    }
    
    /**
     * Inicializa o formulário multi-step
     */
    function initMultiStepForm() {
        // Abrir formulário
        $('.open-form-btn').on('click', function(e) {
            e.preventDefault();
            openForm();
        });
        
        // Fechar formulário
        $('.close-form, .form-overlay').on('click', function(e) {
            if (e.target === this) {
                closeForm();
            }
        });
        
        // Navegação entre etapas
        $('#prevBtn').on('click', function() {
            prevStep();
        });
        
        $('#nextBtn').on('click', function() {
            nextStep();
        });
        
        // Envio do formulário
        $('#multiStepForm').on('submit', function(e) {
            e.preventDefault();
            
            if (validateCurrentStep()) {
                submitForm();
            }
        });
        
        // Tecla ESC para fechar formulário
        $(document).on('keydown', function(e) {
            if (e.key === 'Escape' && $('#consultationForm').hasClass('active')) {
                closeForm();
            }
        });
    }
    
    /**
     * Abre o formulário de consulta
     */
    function openForm() {
        $('#consultationForm').addClass('active');
        $('body').addClass('form-open');
        resetForm();
    }
    
    /**
     * Fecha o formulário de consulta
     */
    function closeForm() {
        $('#consultationForm').removeClass('active');
        $('body').removeClass('form-open');
    }
    
    /**
     * Avança para a próxima etapa do formulário
     */
    function nextStep() {
        if (validateCurrentStep()) {
            currentStep++;
            
            if (currentStep > totalSteps) {
                currentStep = totalSteps;
            }
            
            showStep(currentStep);
        }
    }
    
    /**
     * Volta para a etapa anterior do formulário
     */
    function prevStep() {
        currentStep--;
        
        if (currentStep < 1) {
            currentStep = 1;
        }
        
        showStep(currentStep);
    }
    
    /**
     * Exibe a etapa especificada do formulário
     */
    function showStep(step) {
        // Ocultar todas as etapas
        $('.step').removeClass('active');
        
        // Mostrar a etapa atual
        $('[data-step="' + step + '"]').addClass('active');
        
        // Atualizar botões
        const prevBtn = $('#prevBtn');
        const nextBtn = $('#nextBtn');
        const submitBtn = $('#submitBtn');
        
        if (step === 1) {
            prevBtn.addClass('hidden');
        } else {
            prevBtn.removeClass('hidden');
        }
        
        if (step === totalSteps) {
            nextBtn.addClass('hidden');
            submitBtn.removeClass('hidden');
        } else {
            nextBtn.removeClass('hidden');
            submitBtn.addClass('hidden');
        }
        
        // Atualizar indicadores de etapa
        updateStepIndicators(step);
    }
    
    /**
     * Atualiza os indicadores visuais das etapas
     */
    function updateStepIndicators(currentStep) {
        $('.step-indicator').each(function(index) {
            const step = index + 1;
            
            $(this).removeClass('active completed');
            
            if (step === currentStep) {
                $(this).addClass('active');
            } else if (step < currentStep) {
                $(this).addClass('completed');
            }
        });
    }
    
    /**
     * Valida a etapa atual do formulário
     */
    function validateCurrentStep() {
        const currentStepElement = $('[data-step="' + currentStep + '"]');
        const requiredFields = currentStepElement.find('[required]');
        let isValid = true;
        
        // Verificar campos obrigatórios
        requiredFields.each(function() {
            if (!$(this).val().trim()) {
                $(this).addClass('error');
                isValid = false;
            } else {
                $(this).removeClass('error');
            }
        });
        
        // Validações específicas por etapa
        if (isValid && currentStep === 2) {
            // Validar CPF/CNPJ
            const cpfCnpj = $('#cpf_cnpj').val().replace(/[^\d]/g, '');
            
            if (cpfCnpj.length !== 11 && cpfCnpj.length !== 14) {
                $('#cpf_cnpj').addClass('error');
                isValid = false;
            } else if (cpfCnpj.length === 11 && !validateCPF(cpfCnpj)) {
                $('#cpf_cnpj').addClass('error');
                isValid = false;
            } else if (cpfCnpj.length === 14 && !validateCNPJ(cpfCnpj)) {
                $('#cpf_cnpj').addClass('error');
                isValid = false;
            }
        }
        
        return isValid;
    }
    
    /**
     * Valida CPF
     */
    function validateCPF(cpf) {
        if (/^(\d)\1{10}$/.test(cpf)) return false;
        
        let sum = 0;
        let remainder;
        
        for (let i = 1; i <= 9; i++) {
            sum += parseInt(cpf.substring(i - 1, i)) * (11 - i);
        }
        
        remainder = (sum * 10) % 11;
        
        if (remainder === 10 || remainder === 11) {
            remainder = 0;
        }
        
        if (remainder !== parseInt(cpf.substring(9, 10))) {
            return false;
        }
        
        sum = 0;
        
        for (let i = 1; i <= 10; i++) {
            sum += parseInt(cpf.substring(i - 1, i)) * (12 - i);
        }
        
        remainder = (sum * 10) % 11;
        
        if (remainder === 10 || remainder === 11) {
            remainder = 0;
        }
        
        if (remainder !== parseInt(cpf.substring(10, 11))) {
            return false;
        }
        
        return true;
    }
    
    /**
     * Valida CNPJ
     */
    function validateCNPJ(cnpj) {
        if (/^(\d)\1{13}$/.test(cnpj)) return false;
        
        let size = cnpj.length - 2;
        let numbers = cnpj.substring(0, size);
        let digits = cnpj.substring(size);
        let sum = 0;
        let pos = size - 7;
        
        for (let i = size; i >= 1; i--) {
            sum += numbers.charAt(size - i) * pos--;
            if (pos < 2) pos = 9;
        }
        
        let result = sum % 11 < 2 ? 0 : 11 - (sum % 11);
        
        if (result !== parseInt(digits.charAt(0))) {
            return false;
        }
        
        size += 1;
        numbers = cnpj.substring(0, size);
        sum = 0;
        pos = size - 7;
        
        for (let i = size; i >= 1; i--) {
            sum += numbers.charAt(size - i) * pos--;
            if (pos < 2) pos = 9;
        }
        
        result = sum % 11 < 2 ? 0 : 11 - (sum % 11);
        
        if (result !== parseInt(digits.charAt(1))) {
            return false;
        }
        
        return true;
    }
    
    /**
     * Reseta o formulário para o estado inicial
     */
    function resetForm() {
        $('#multiStepForm')[0].reset();
        currentStep = 1;
        showStep(currentStep);
        $('.error').removeClass('error');
    }
    
    /**
     * Envia o formulário via AJAX
     */
    function submitForm() {
        // Obter os dados do formulário
        const formData = $('#multiStepForm').serialize();
        
        // Adicionar loader
        const submitBtn = $('#submitBtn');
        const originalText = submitBtn.text();
        submitBtn.prop('disabled', true).text('Enviando...');
        
        // Enviar via AJAX
        $.ajax({
            url: thabattaData.ajaxUrl,
            type: 'POST',
            data: {
                action: 'thabatta_lead',
                nonce: thabattaData.nonce,
                formData: formData
            },
            success: function(response) {
                if (response.success) {
                    // Mostrar mensagem de sucesso
                    showSuccessMessage();
                } else {
                    // Mostrar erro
                    alert(response.data.message || 'Ocorreu um erro ao enviar o formulário. Por favor, tente novamente.');
                    submitBtn.prop('disabled', false).text(originalText);
                }
            },
            error: function() {
                alert('Ocorreu um erro ao enviar o formulário. Por favor, tente novamente.');
                submitBtn.prop('disabled', false).text(originalText);
            }
        });
    }
    
    /**
     * Exibe mensagem de sucesso após envio do formulário
     */
    function showSuccessMessage() {
        // Substituir formulário por mensagem
        const formContainer = $('.form-container');
        
        formContainer.html(`
            <div class="success-message text-center">
                <i class="fas fa-check-circle text-success" style="font-size: 3rem; color: #28a745; margin-bottom: 1rem;"></i>
                <h3>Obrigado pelo contato!</h3>
                <p>Recebemos sua consulta e entraremos em contato o mais breve possível.</p>
                <button type="button" class="close-form mt-4">Fechar</button>
            </div>
        `);
        
        // Fechar formulário ao clicar no botão
        $('.close-form').on('click', function() {
            closeForm();
        });
    }
    
    /**
     * Inicializa o smooth scroll para links âncora
     */
    function initSmoothScroll() {
        $('a[href*="#"]:not([href="#"])').on('click', function() {
            if (location.pathname.replace(/^\//, '') === this.pathname.replace(/^\//, '') && location.hostname === this.hostname) {
                let target = $(this.hash);
                target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
                
                if (target.length) {
                    $('html, body').animate({
                        scrollTop: target.offset().top - 70
                    }, 800);
                    return false;
                }
            }
        });
    }
    
    /**
     * Inicializa animações ao scroll
     */
    function initScrollAnimations() {
        // Adicionar classe aos elementos quando entrarem no viewport
        const elements = $('.animated');
        
        function checkIfInView() {
            const windowHeight = $(window).height();
            const windowTopPosition = $(window).scrollTop();
            const windowBottomPosition = (windowTopPosition + windowHeight);
            
            $.each(elements, function() {
                const element = $(this);
                const elementHeight = element.outerHeight();
                const elementTopPosition = element.offset().top;
                const elementBottomPosition = (elementTopPosition + elementHeight);
                
                // Verificar se o elemento está visível
                if ((elementBottomPosition >= windowTopPosition) && (elementTopPosition <= windowBottomPosition)) {
                    element.addClass('in-view');
                }
            });
        }
        
        // Verificar ao carregar e ao scroll
        $(window).on('scroll resize', checkIfInView);
        $(window).trigger('scroll');
    }
    
})(jQuery); 